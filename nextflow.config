params {
  // Genotype QC parameters (GRCh38)
  ref_genome = "genimpute_complete_reference/Homo_sapiens.GRCh38.dna.primary_assembly.fa"
  ref_panel = "genimpute_complete_reference/1KG_30x-GRCh38_variant_information_with_X"

  // Impututation parameters
  eagle_genetic_map = "genimpute_complete_reference/genetic_map_hg38_withX.txt.gz"
  eagle_phasing_reference = "genimpute_complete_reference/Eagle_1KG_30x-GRCh38_phasing_reference/"

  // Minimac4 parameters
  minimac_imputation_reference = "genimpute_complete_reference/Minimac_1KG_30x-GRCh38_imputation_reference/"

  // CrossMap.py parameters
  chain_file = "data/GRCh37_to_GRCh38.chain"
  r2_thresh = 0.4

  // Chromosome annotation parameters (used during plink_to_vcf())
  annotation_file_23_to_X = "data/chr23_to_X.txt"

  // X chromosome imputation
  impute_PAR = false
  impute_non_PAR = false

  outdir = './results'
  custom_config_version = 'master'
  tracedir = "${params.outdir}/pipeline_info"

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
}

//Define Docker/Singularity container
process.container = 'quay.io/eqtlcatalogue/genimpute:v20.06.1'

includeConfig 'conf/base.config'
includeConfig "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}/nfcore_custom.config"

profiles {
  tartu_hpc { includeConfig 'conf/tartu_hpc.config'}
  eqtl_catalogue {
    includeConfig 'conf/tartu_hpc.config'
    includeConfig 'conf/eqtl_catalogue.config'
  }
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
  }
  singularity {
    singularity.enabled = true
  }
  test { includeConfig 'genotype_qc/conf/test.config' }
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/nf-core/qtlmap_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/nf-core/qtlmap_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/nf-core/qtlmap_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/nf-core/qtlmap_dag.svg"
}

manifest {
  name = 'eQTL-Catalogue/genimpute'
  author = 'Kaur Alasoo'
  homePage = 'https://github.com/eQTL-Catalogue/genimpute'
  description = ' '
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
